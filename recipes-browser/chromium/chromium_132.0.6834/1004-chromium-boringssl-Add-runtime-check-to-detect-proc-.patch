From c3eb257543f96df97d475694fc8fae20ad6d743f Mon Sep 17 00:00:00 2001
From: Kentaro Hayashi <hayashi@clear-code.com>
Date: Fri, 27 Jun 2025 14:12:37 +0900
Subject: [PATCH] chromium/boringssl: Add runtime check to detect /proc/cpuinfo
 Features

Check whether Cryptographic Extesion is available or not in runtime.
This is just a fallback not to cause illegal instructions on
board without CE features.

Upstream-Status: Inappropriate [rzg2l specific]
Signed-off-by: Kentaro Hayashi <hayashi@clear-code.com>
---
 third_party/boringssl/src/crypto/internal.h | 56 +++++++++++++++++++--
 1 file changed, 51 insertions(+), 5 deletions(-)

diff --git a/third_party/boringssl/src/crypto/internal.h b/third_party/boringssl/src/crypto/internal.h
index ca37027956..6ba8a34c5a 100644
--- a/third_party/boringssl/src/crypto/internal.h
+++ b/third_party/boringssl/src/crypto/internal.h
@@ -175,6 +175,12 @@ OPENSSL_MSVC_PRAGMA(warning(push, 3))
 OPENSSL_MSVC_PRAGMA(warning(pop))
 #endif
 
+// Use getauxval(AT_HWCAP) to detect Features in /proc/cpuinfo
+#if defined(__aarch64__) && defined(__linux__)
+#include <asm/hwcap.h>
+#include <sys/auxv.h>
+#endif
+
 #if defined(__cplusplus)
 extern "C" {
 #endif
@@ -1668,7 +1674,15 @@ OPENSSL_INLINE int CRYPTO_is_NEON_capable(void) {
 
 OPENSSL_INLINE int CRYPTO_is_ARMv8_AES_capable(void) {
 #if defined(OPENSSL_STATIC_ARMCAP_AES) || defined(__ARM_FEATURE_AES)
-  return 1;
+  // Check whether Cryptographic Extesion is available or not in runtime
+  // This is just a fallback not to cause illegal instructions on
+  // board without CE feature.
+  int64_t hwcaps = getauxval(AT_HWCAP);
+  if (hwcaps & HWCAP_AES) {
+    return 1;
+  } else {
+    return 0;
+  }
 #elif defined(OPENSSL_STATIC_ARMCAP)
   return 0;
 #else
@@ -1678,7 +1692,15 @@ OPENSSL_INLINE int CRYPTO_is_ARMv8_AES_capable(void) {
 
 OPENSSL_INLINE int CRYPTO_is_ARMv8_PMULL_capable(void) {
 #if defined(OPENSSL_STATIC_ARMCAP_PMULL) || defined(__ARM_FEATURE_AES)
-  return 1;
+  // Check whether Cryptographic Extesion is available or not in runtime
+  // This is just a fallback not to cause illegal instructions on
+  // board without CE feature.
+  int64_t hwcaps = getauxval(AT_HWCAP);
+  if (hwcaps & HWCAP_PMULL) {
+    return 1;
+  } else {
+    return 0;
+  }
 #elif defined(OPENSSL_STATIC_ARMCAP)
   return 0;
 #else
@@ -1690,7 +1712,15 @@ OPENSSL_INLINE int CRYPTO_is_ARMv8_SHA1_capable(void) {
   // SHA-1 and SHA-2 (only) share |__ARM_FEATURE_SHA2| but otherwise
   // are dealt with independently.
 #if defined(OPENSSL_STATIC_ARMCAP_SHA1) || defined(__ARM_FEATURE_SHA2)
-  return 1;
+  // Check whether Cryptographic Extesion is available or not in runtime
+  // This is just a fallback not to cause illegal instructions on
+  // board without CE feature.
+  int64_t hwcaps = getauxval(AT_HWCAP);
+  if (hwcaps & HWCAP_SHA2) {
+    return 1;
+  } else {
+    return 0;
+  }
 #elif defined(OPENSSL_STATIC_ARMCAP)
   return 0;
 #else
@@ -1702,7 +1732,15 @@ OPENSSL_INLINE int CRYPTO_is_ARMv8_SHA256_capable(void) {
   // SHA-1 and SHA-2 (only) share |__ARM_FEATURE_SHA2| but otherwise
   // are dealt with independently.
 #if defined(OPENSSL_STATIC_ARMCAP_SHA256) || defined(__ARM_FEATURE_SHA2)
-  return 1;
+  // Check whether Cryptographic Extesion is available or not in runtime
+  // This is just a fallback not to cause illegal instructions on
+  // board without CE feature.
+  int64_t hwcaps = getauxval(AT_HWCAP);
+  if (hwcaps & HWCAP_SHA2) {
+    return 1;
+  } else {
+    return 0;
+  }
 #elif defined(OPENSSL_STATIC_ARMCAP)
   return 0;
 #else
@@ -1713,7 +1751,15 @@ OPENSSL_INLINE int CRYPTO_is_ARMv8_SHA256_capable(void) {
 OPENSSL_INLINE int CRYPTO_is_ARMv8_SHA512_capable(void) {
   // There is no |OPENSSL_STATIC_ARMCAP_SHA512|.
 #if defined(__ARM_FEATURE_SHA512)
-  return 1;
+  // Check whether Cryptographic Extesion is available or not in runtime
+  // This is just a fallback not to cause illegal instructions on
+  // board without CE feature.
+  int64_t hwcaps = getauxval(AT_HWCAP);
+  if (hwcaps & HWCAP_SHA512) {
+    return 1;
+  } else {
+    return 0;
+  }
 #elif defined(OPENSSL_STATIC_ARMCAP)
   return 0;
 #else
-- 
2.50.0

