From b4760db208e7adc873fbd6fcbef36543dd897bb7 Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@clear-code.com>
Date: Tue, 3 Dec 2024 21:58:46 +0900
Subject: [PATCH] omxvideodec: Try to mitigate freeze issue on flushing

Signed-off-by: Takuro Ashie <ashie@clear-code.com>

---
 omx/gstomxvideodec.c | 48 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index ec3a1c3..5287e72 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -75,6 +75,8 @@ static gboolean gst_omx_video_dec_stop (GstVideoDecoder * decoder);
 static gboolean gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
     GstVideoCodecState * state);
 static gboolean gst_omx_video_dec_flush (GstVideoDecoder * decoder);
+static gboolean gst_omx_video_dec_sink_event (GstVideoDecoder * decoder,
+    GstEvent * event);
 static GstFlowReturn gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
     GstVideoCodecFrame * frame);
 static GstFlowReturn gst_omx_video_dec_finish (GstVideoDecoder * decoder);
@@ -242,6 +244,7 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   video_decoder_class->start = GST_DEBUG_FUNCPTR (gst_omx_video_dec_start);
   video_decoder_class->stop = GST_DEBUG_FUNCPTR (gst_omx_video_dec_stop);
   video_decoder_class->flush = GST_DEBUG_FUNCPTR (gst_omx_video_dec_flush);
+  video_decoder_class->sink_event = GST_DEBUG_FUNCPTR (gst_omx_video_dec_sink_event);
   video_decoder_class->set_format =
       GST_DEBUG_FUNCPTR (gst_omx_video_dec_set_format);
   video_decoder_class->handle_frame =
@@ -3055,6 +3058,51 @@ gst_omx_video_dec_flush (GstVideoDecoder * decoder)
   return TRUE;
 }
 
+static gboolean
+gst_omx_video_dec_sink_event (GstVideoDecoder * decoder, GstEvent * event)
+{
+  GstOMXVideoDec *self;
+
+  self = GST_OMX_VIDEO_DEC (decoder);
+
+  switch (GST_EVENT_TYPE (event)) {
+  case GST_EVENT_FLUSH_START:
+    GST_DEBUG_OBJECT(self, "flush_start");
+    if (self->dec_in_port)
+      gst_omx_port_set_flushing (self->dec_in_port, 5 * GST_SECOND, TRUE);
+    if (self->dec_out_port)
+      gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, TRUE);
+#if defined (USE_OMX_TARGET_RPI) && defined (HAVE_GST_GL)
+    if (self->egl_in_port)
+      gst_omx_port_set_flushing (self->egl_in_port, 5 * GST_SECOND, TRUE);
+    if (self->egl_out_port)
+      gst_omx_port_set_flushing (self->egl_out_port, 5 * GST_SECOND, TRUE);
+#endif
+    GST_VIDEO_DECODER_CLASS
+      (gst_omx_video_dec_parent_class)->sink_event (decoder, event);
+    return TRUE;
+  case GST_EVENT_FLUSH_STOP:
+    GST_DEBUG_OBJECT(self, "flush_stop");
+    GST_VIDEO_DECODER_CLASS
+      (gst_omx_video_dec_parent_class)->sink_event (decoder, event);
+    if (self->dec_in_port)
+      gst_omx_port_set_flushing (self->dec_in_port, 5 * GST_SECOND, FALSE);
+    if (self->dec_out_port)
+      gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, FALSE);
+#if defined (USE_OMX_TARGET_RPI) && defined (HAVE_GST_GL)
+    if (self->egl_in_port)
+      gst_omx_port_set_flushing (self->egl_in_port, 5 * GST_SECOND, FALSE);
+    if (self->egl_out_port)
+      gst_omx_port_set_flushing (self->egl_out_port, 5 * GST_SECOND, FALSE);
+#endif
+    return TRUE;
+  default:
+    break;
+  }
+  return GST_VIDEO_DECODER_CLASS
+    (gst_omx_video_dec_parent_class)->sink_event (decoder, event);
+}
+
 static GstFlowReturn
 gst_omx_video_dec_handle_frame (GstVideoDecoder * decoder,
     GstVideoCodecFrame * frame)
